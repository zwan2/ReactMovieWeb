{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","protoTypes","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callAPI","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAsCA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACQC,EAAAC,EAAAC,cAAA,OAAKC,IAAOL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAGhE,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAYRF,EAAWG,WAAa,CACpBD,MAAOE,IAAUC,OAAOC,YAGdF,IAAUC,OAAOC,WAGhBC,MA1Df,SAAAC,GAAkD,IAAlCV,EAAkCU,EAAlCV,MAAON,EAA2BgB,EAA3BhB,OAAQiB,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,EAAL,KACAJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVU,EAAOE,IAAI,SAACT,EAAMU,GAAP,OAAiBlB,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOW,IAAKD,OAEhElB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACAoB,KAAQL,EACRM,QAAU,IACVC,SAAW,MACXC,WAAS,EACTC,QAAU,gBC0CfC,6MApDbC,MAAQ,KAWRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAIXF,EAAKG,SAAS,CACZT,OAAQA,IALC,wBAAAG,EAAAO,SAAAX,EAAAY,WASbJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKhB,SACvBiB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WAWd,OAVef,EAAKT,MAAMG,OAAOb,IAAI,SAAAmC,GAEnC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,CACLjD,MAASgD,EAAME,cACfxD,OAAUsD,EAAMG,mBAChBpC,IAAOiC,EAAMI,GACbzC,OAAUqC,EAAMrC,OAChBC,SAAYoC,EAAMpC,kGA/BtBiC,QAAQC,IAAI,yDAIZT,KAAKb,aACLa,KAAKJ,4CAiCLY,QAAQC,IAAI,UADL,IAEApB,EAAUW,KAAKd,MAAfG,OACP,OACE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAWyB,EAAS,MAAQ,gBAC5BW,KAAKd,MAAMG,OAASW,KAAKU,gBAAkB,qBAhDpCM,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.6ea4575b.chunk.js","sourcesContent":["import React, {} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n//class-this\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />          \r\n            </div>\r\n            <div className=\"Movie__Column\">       \r\n                <h1>{title} </h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                    text = {synopsis}\r\n                    maxLine = '3'\r\n                    ellipsis = '...'\r\n                    trimRight\r\n                    basedOn = 'letters' \r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    key: PropTypes.number.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n//functional component\r\nfunction MoviePoster({poster, alt}) {\r\n    return(\r\n            <img src = {poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\nfunction MovieGenre({genre}) {\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    )\r\n}\r\nfunction MovieSynopsis({synopsis}) {\r\n    return(\r\n        <span className=\"Movie__Synopsis\">{synopsis}</span>\r\n    )\r\n}\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\nMovieGenre.protoTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\nMovieSynopsis.protoTypes = {\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n\n// Render: componentWillMount() -> render() -> componentDidMount()\n// Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n\nclass App extends Component {\n\n  state = {\n  };\n  \n  componentWillMount() {\n    console.log(\"willMount\");\n  }\n\n  componentDidMount() {\n    this._getMovies();\n    this._callAPI();\n  }\n  _getMovies = async () => {\n    const movies = await this._callAPI();\n\n    //callAPI() 완료되기 전까지 실행되지 않음\n    this.setState({\n      movies: movies\n    });\n  }\n\n  _callAPI = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n\n      return <Movie \n        title = {movie.title_english} \n        poster = {movie.medium_cover_image} \n        key = {movie.id} \n        genres = {movie.genres}\n        synopsis = {movie.synopsis} \n        />\n    })\n    return movies\n  }\n\n  render() {\n    console.log(\"render\");\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n          {this.state.movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM: Web, ReactNative: App\n//ReactDOM이 render한다. App을 (id가 root인 곳에)\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}